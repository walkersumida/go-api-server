// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateItem implements createItem operation.
	//
	// Create a new item.
	//
	// POST /items
	CreateItem(ctx context.Context, req *Item) (*Item, error)
	// DeleteItem implements deleteItem operation.
	//
	// Deletes a item.
	//
	// DELETE /items/{id}
	DeleteItem(ctx context.Context, params DeleteItemParams) error
	// GetItem implements getItem operation.
	//
	// Returns a item.
	//
	// GET /items/{id}
	GetItem(ctx context.Context, params GetItemParams) (*Item, error)
	// GetItems implements getItems operation.
	//
	// Get all items.
	//
	// GET /items
	GetItems(ctx context.Context) ([]Item, error)
	// UpdateItem implements updateItem operation.
	//
	// Updates a item.
	//
	// POST /items/{id}
	UpdateItem(ctx context.Context, params UpdateItemParams) error
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
